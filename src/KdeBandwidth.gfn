<?xml version="1.0" encoding="UTF-8"?>
<gretl-functions>
<gretl-function-package name="KdeBandwidth" no-data-ok="true" minver="2022a">
<author email="atecon@posteo.de">Artur Tarassow</author>
<version>0.1</version>
<date>2023-08-17</date>
<description>Optimal bandwidth for kernel density estimation</description>
<tags>C14</tags>
<help filename="KdeBandwidth_help.md">
# Introduction

Calculate the bandwidth for kernel density estimation (KDE) using various methods for uni-variate data only (at the moment).

Please report bugs or comments on the gretl mailing list, write to
atecon@posteo.de or report an issue on github
(https://github.com/atecon/KdeBandwidt).


# Public function

```
function scalar (matrix m, string method, const int df[0::1], const int skip_na[0:1:1], const int verbose[0:1:0])
```

Calculate the bandwidth for kernel density estimation (KDE) using various methods for uni-variate data only (at the moment).


## Parameters

- `m`:     `matrix`, Input data as a column vector
- `method`:  `string`, Method for bandwidth selection. Supported values: &quot;scott&quot; or &quot;silverman&quot;.
- `df`: bool, Indicator for degrees of freedom correction. 0 not to correct, 1 to correct.
- `skip_na`: `bool`, Indicator for skipping missing values. 0 to include missing values, 1 to remove them.
- `verbose`: `bool`, Indicator for printing bandwidth selection results. 0 to disable, 1 to enable.

## Returns

scalar: The calculated bandwidth for KDE.


# Changelog

* **v0.1 (August 2023)**
    * Initial version
</help>
<gretl-function name="kde_bandwidth" type="scalar">
 <params count="5">
  <param name="m" type="matrix"/>
  <param name="method" type="string"/>
  <param name="df" type="int" min="0" default="1" const="true"/>
  <param name="skip_na" type="int" min="0" max="1" default="1" const="true"/>
  <param name="verbose" type="int" min="0" max="1" default="0" const="true"/>
 </params>
<code>/*
Calculate the bandwidth for kernel density estimation (KDE) using
various methods for uni-variate data only (at the moment).

Parameters:
m (matrix): Input data as a column vector.
method (string): Method for bandwidth selection. Supported values: &quot;scott&quot; or &quot;silverman&quot;.
df (bool): Indicator for degrees of freedom correction. 0 not to correct, 1 to correct.
skip_na (bool): Indicator for skipping missing values. 0 to include missing values, 1 to remove them.
verbose (bool): Indicator for printing bandwidth selection results. 0 to disable, 1 to enable.

Returns:
scalar: The calculated bandwidth for KDE.

Raises:
Error: If the input data has more than one column.
Error: If an unsupported method of bandwidth selection is specified.

Example Usage:
m = {1, 2, 3, 4, 5}  # Input data as a column vector
method = &quot;silverman&quot;  # Bandwidth selection method
df = 1  # Degrees of freedom
skip_na = 1  # Skip missing values
verbose = 1  # Print bandwidth selection results
bandwidth = kde_bandwidth(m, method, df, skip_na, verbose)
*/

string method = tolower(method)
errorif(cols(m) &gt; 1, &quot;Only column vector is supported&quot;)
matrix m = skip_na == TRUE ? remove_nas(m) : m
scalar n = rows(m)
scalar std_dev = sdc(m, df)

if method == &quot;scott&quot;
  scalar bandwidth = bandwidth_scott(m, std_dev, n)
elif method == &quot;silverman&quot;
  scalar bandwidth = bandwidth_silverman(m, std_dev, n)
else
  errorif(TRUE, &quot;Unsupported method of bandwidth selection.&quot;)
endif

if verbose
  bandwidth_print(method, df, skip_na, bandwidth)
endif

return bandwidth
</code>
</gretl-function>
<gretl-function name="remove_nas" type="matrix" private="1">
 <params count="1">
  <param name="y" type="matrix" const="true"/>
 </params>
<code>/* Remove missing values (NAs) from a matrix.

Parameters:
y (matrix): Input matrix with potential missing values.

Returns:
matrix: The input matrix with all NAs removed. */

return selifr(y, ok(y))
</code>
</gretl-function>
<gretl-function name="bandwidth_print" type="void" private="1">
 <params count="4">
  <param name="method" type="string" const="true"/>
  <param name="df" type="int" min="0" default="1" const="true"/>
  <param name="skip_na" type="int" min="0" max="1" default="1" const="true"/>
  <param name="bandwidth" type="scalar" const="true"/>
 </params>
<code>/* Print out results. */

string df_corr = df == TRUE ? &quot;TRUE&quot; : &quot;FALSE&quot;
string str_skip_na = skip_na == TRUE ? &quot;TRUE&quot; : &quot;FALSE&quot;

printf(&quot;\n*** Bandwidth Selection Results ***\n&quot;)
printf(&quot;Method: %s\n&quot;, method)
printf(&quot;Degrees of freedom correction: %s\n&quot;, df_corr)
printf(&quot;Skip NAs: %s\n&quot;, str_skip_na)
printf(&quot;Bandwidth: %g\n\n&quot;, bandwidth)
</code>
</gretl-function>
<gretl-function name="bandwidth_scott" type="scalar" private="1">
 <params count="3">
  <param name="y" type="matrix"/>
  <param name="std_dev" type="scalar" const="true"/>
  <param name="n" type="scalar" const="true"/>
 </params>
<code>/* Calculate the bandwidth for kernel density estimation (KDE) using Scott's rule.

Parameters:
y (matrix): Input data as a column vector.
std_dev (scalar): Standard deviation of the input data.
n (scalar): Number of observations in the input data.

Returns:
scalar: The calculated bandwidth for KDE using Scott's rule. */

scalar bandwidth = 3.49 * std_dev * n ^ (-0.333)
return bandwidth
</code>
</gretl-function>
<gretl-function name="bandwidth_silverman" type="scalar" private="1">
 <params count="3">
  <param name="y" type="matrix" const="true"/>
  <param name="std_dev" type="scalar" const="true"/>
  <param name="n" type="scalar" const="true"/>
 </params>
<code>/* Calculate the bandwidth for kernel density estimation (KDE) using Silverman's rule.

Parameters:
y (matrix): Input data as a column vector.
std_dev (scalar): Standard deviation of the input data.
n (scalar): Number of observations in the input data.

Returns:
scalar: The calculated bandwidth for KDE using Silverman's rule. */
scalar iqr = quantile(y, 0.75) - quantile(y, 0.25)
matrix value = min(std_dev ~ (iqr / 1.34))
scalar bandwidth = 0.9 * value * (n^(-0.2))

return bandwidth
</code>
</gretl-function>
<sample-script>
clear
set verbose off
include KdeBandwidth.gfn


m = {1, 2, 3, 4, 5}'  # Input data as a column vector
method = &quot;silverman&quot;  # Bandwidth selection method
df = 1  # Degrees of freedom correction
skip_na = 1  # Skip missing values
verbose = 1  # Print bandwidth selection results
bandwidth = kde_bandwidth(m, method, df, skip_na, verbose)
</sample-script>
</gretl-function-package>
</gretl-functions>
